{
  "version": 3,
  "sources": ["../../@azure/msal-react/src/MsalContext.ts", "../../@azure/msal-react/src/utils/utilities.ts", "../../@azure/msal-react/src/packageMetadata.ts", "../../@azure/msal-react/src/MsalProvider.tsx", "../../@azure/msal-react/src/hooks/useMsal.ts", "../../@azure/msal-react/src/hooks/useIsAuthenticated.ts", "../../@azure/msal-react/src/components/AuthenticatedTemplate.tsx", "../../@azure/msal-react/src/components/UnauthenticatedTemplate.tsx", "../../@azure/msal-react/src/hooks/useAccount.ts", "../../@azure/msal-react/src/error/ReactAuthError.ts", "../../@azure/msal-react/src/hooks/useMsalAuthentication.ts", "../../@azure/msal-react/src/components/MsalAuthenticationTemplate.tsx", "../../@azure/msal-react/src/components/withMsal.tsx"],
  "sourcesContent": ["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport * as React from \"react\";\nimport { stubbedPublicClientApplication, Logger, InteractionStatus, } from \"@azure/msal-browser\";\n/*\n * Stubbed context implementation\n * Only used when there is no provider, which is an unsupported scenario\n */\nconst defaultMsalContext = {\n    instance: stubbedPublicClientApplication,\n    inProgress: InteractionStatus.None,\n    accounts: [],\n    logger: new Logger({}),\n};\nexport const MsalContext = React.createContext(defaultMsalContext);\nexport const MsalConsumer = MsalContext.Consumer;\n//# sourceMappingURL=MsalContext.js.map", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nexport function getChildrenOrFunction(children, args) {\n    if (typeof children === \"function\") {\n        return children(args);\n    }\n    return children;\n}\n/**\n * Helper function to determine whether 2 arrays are equal\n * Used to avoid unnecessary state updates\n * @param arrayA\n * @param arrayB\n */\nexport function accountArraysAreEqual(arrayA, arrayB) {\n    if (arrayA.length !== arrayB.length) {\n        return false;\n    }\n    const comparisonArray = [...arrayB];\n    return arrayA.every((elementA) => {\n        const elementB = comparisonArray.shift();\n        if (!elementA || !elementB) {\n            return false;\n        }\n        return (elementA.homeAccountId === elementB.homeAccountId &&\n            elementA.localAccountId === elementB.localAccountId &&\n            elementA.username === elementB.username);\n    });\n}\nexport function getAccountByIdentifiers(allAccounts, accountIdentifiers) {\n    if (allAccounts.length > 0 &&\n        (accountIdentifiers.homeAccountId ||\n            accountIdentifiers.localAccountId ||\n            accountIdentifiers.username)) {\n        const matchedAccounts = allAccounts.filter((accountObj) => {\n            if (accountIdentifiers.username &&\n                accountIdentifiers.username.toLowerCase() !==\n                    accountObj.username.toLowerCase()) {\n                return false;\n            }\n            if (accountIdentifiers.homeAccountId &&\n                accountIdentifiers.homeAccountId.toLowerCase() !==\n                    accountObj.homeAccountId.toLowerCase()) {\n                return false;\n            }\n            if (accountIdentifiers.localAccountId &&\n                accountIdentifiers.localAccountId.toLowerCase() !==\n                    accountObj.localAccountId.toLowerCase()) {\n                return false;\n            }\n            return true;\n        });\n        return matchedAccounts[0] || null;\n    }\n    else {\n        return null;\n    }\n}\n//# sourceMappingURL=utilities.js.map", "/* eslint-disable header/header */\nexport const name = \"@azure/msal-react\";\nexport const version = \"2.0.6\";\n//# sourceMappingURL=packageMetadata.js.map", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport React, { useEffect, useReducer, useMemo, } from \"react\";\nimport { EventMessageUtils, InteractionStatus, WrapperSKU, } from \"@azure/msal-browser\";\nimport { MsalContext } from \"./MsalContext\";\nimport { accountArraysAreEqual } from \"./utils/utilities\";\nimport { name as SKU, version } from \"./packageMetadata\";\nconst MsalProviderActionType = {\n    UNBLOCK_INPROGRESS: \"UNBLOCK_INPROGRESS\",\n    EVENT: \"EVENT\",\n};\n/**\n * Returns the next inProgress and accounts state based on event message\n * @param previousState\n * @param action\n */\nconst reducer = (previousState, action) => {\n    const { type, payload } = action;\n    let newInProgress = previousState.inProgress;\n    switch (type) {\n        case MsalProviderActionType.UNBLOCK_INPROGRESS:\n            if (previousState.inProgress === InteractionStatus.Startup) {\n                newInProgress = InteractionStatus.None;\n                payload.logger.info(\"MsalProvider - handleRedirectPromise resolved, setting inProgress to 'none'\");\n            }\n            break;\n        case MsalProviderActionType.EVENT:\n            const message = payload.message;\n            const status = EventMessageUtils.getInteractionStatusFromEvent(message, previousState.inProgress);\n            if (status) {\n                payload.logger.info(`MsalProvider - ${message.eventType} results in setting inProgress from ${previousState.inProgress} to ${status}`);\n                newInProgress = status;\n            }\n            break;\n        default:\n            throw new Error(`Unknown action type: ${type}`);\n    }\n    const currentAccounts = payload.instance.getAllAccounts();\n    if (newInProgress !== previousState.inProgress &&\n        !accountArraysAreEqual(currentAccounts, previousState.accounts)) {\n        // Both inProgress and accounts changed\n        return {\n            ...previousState,\n            inProgress: newInProgress,\n            accounts: currentAccounts,\n        };\n    }\n    else if (newInProgress !== previousState.inProgress) {\n        // Only only inProgress changed\n        return {\n            ...previousState,\n            inProgress: newInProgress,\n        };\n    }\n    else if (!accountArraysAreEqual(currentAccounts, previousState.accounts)) {\n        // Only accounts changed\n        return {\n            ...previousState,\n            accounts: currentAccounts,\n        };\n    }\n    else {\n        // Nothing changed\n        return previousState;\n    }\n};\n/**\n * MSAL context provider component. This must be rendered above any other components that use MSAL.\n */\nexport function MsalProvider({ instance, children, }) {\n    useEffect(() => {\n        instance.initializeWrapperLibrary(WrapperSKU.React, version);\n    }, [instance]);\n    // Create a logger instance for msal-react with the same options as PublicClientApplication\n    const logger = useMemo(() => {\n        return instance.getLogger().clone(SKU, version);\n    }, [instance]);\n    const [state, updateState] = useReducer(reducer, undefined, () => {\n        // Lazy initialization of the initial state\n        return {\n            inProgress: InteractionStatus.Startup,\n            accounts: instance.getAllAccounts(),\n        };\n    });\n    useEffect(() => {\n        const callbackId = instance.addEventCallback((message) => {\n            updateState({\n                payload: {\n                    instance,\n                    logger,\n                    message,\n                },\n                type: MsalProviderActionType.EVENT,\n            });\n        });\n        logger.verbose(`MsalProvider - Registered event callback with id: ${callbackId}`);\n        instance\n            .initialize()\n            .then(() => {\n            instance\n                .handleRedirectPromise()\n                .catch(() => {\n                // Errors should be handled by listening to the LOGIN_FAILURE event\n                return;\n            })\n                .finally(() => {\n                /*\n                 * If handleRedirectPromise returns a cached promise the necessary events may not be fired\n                 * This is a fallback to prevent inProgress from getting stuck in 'startup'\n                 */\n                updateState({\n                    payload: {\n                        instance,\n                        logger,\n                    },\n                    type: MsalProviderActionType.UNBLOCK_INPROGRESS,\n                });\n            });\n        })\n            .catch(() => {\n            // Errors should be handled by listening to the LOGIN_FAILURE event\n            return;\n        });\n        return () => {\n            // Remove callback when component unmounts or accounts change\n            if (callbackId) {\n                logger.verbose(`MsalProvider - Removing event callback ${callbackId}`);\n                instance.removeEventCallback(callbackId);\n            }\n        };\n    }, [instance, logger]);\n    const contextValue = {\n        instance,\n        inProgress: state.inProgress,\n        accounts: state.accounts,\n        logger,\n    };\n    return (React.createElement(MsalContext.Provider, { value: contextValue }, children));\n}\n//# sourceMappingURL=MsalProvider.js.map", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { useContext } from \"react\";\nimport { MsalContext } from \"../MsalContext\";\n/**\n * Returns Msal Context values\n */\nexport const useMsal = () => useContext(MsalContext);\n//# sourceMappingURL=useMsal.js.map", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { useState, useEffect } from \"react\";\nimport { useMsal } from \"./useMsal\";\nimport { InteractionStatus } from \"@azure/msal-browser\";\nimport { getAccountByIdentifiers } from \"../utils/utilities\";\nfunction isAuthenticated(allAccounts, matchAccount) {\n    if (matchAccount &&\n        (matchAccount.username ||\n            matchAccount.homeAccountId ||\n            matchAccount.localAccountId)) {\n        return !!getAccountByIdentifiers(allAccounts, matchAccount);\n    }\n    return allAccounts.length > 0;\n}\n/**\n * Returns whether or not a user is currently signed-in. Optionally provide 1 or more accountIdentifiers to determine if a specific user is signed-in\n * @param matchAccount\n */\nexport function useIsAuthenticated(matchAccount) {\n    const { accounts: allAccounts, inProgress } = useMsal();\n    const [hasAuthenticated, setHasAuthenticated] = useState(() => {\n        if (inProgress === InteractionStatus.Startup) {\n            return false;\n        }\n        return isAuthenticated(allAccounts, matchAccount);\n    });\n    useEffect(() => {\n        setHasAuthenticated(isAuthenticated(allAccounts, matchAccount));\n    }, [allAccounts, matchAccount]);\n    return hasAuthenticated;\n}\n//# sourceMappingURL=useIsAuthenticated.js.map", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport React, { useMemo } from \"react\";\nimport { getChildrenOrFunction } from \"../utils/utilities\";\nimport { useMsal } from \"../hooks/useMsal\";\nimport { useIsAuthenticated } from \"../hooks/useIsAuthenticated\";\nimport { InteractionStatus } from \"@azure/msal-browser\";\n/**\n * Renders child components if user is authenticated\n * @param props\n */\nexport function AuthenticatedTemplate({ username, homeAccountId, localAccountId, children, }) {\n    const context = useMsal();\n    const accountIdentifier = useMemo(() => {\n        return {\n            username,\n            homeAccountId,\n            localAccountId,\n        };\n    }, [username, homeAccountId, localAccountId]);\n    const isAuthenticated = useIsAuthenticated(accountIdentifier);\n    if (isAuthenticated && context.inProgress !== InteractionStatus.Startup) {\n        return (React.createElement(React.Fragment, null, getChildrenOrFunction(children, context)));\n    }\n    return null;\n}\n//# sourceMappingURL=AuthenticatedTemplate.js.map", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport React, { useMemo } from \"react\";\nimport { useMsal } from \"../hooks/useMsal\";\nimport { useIsAuthenticated } from \"../hooks/useIsAuthenticated\";\nimport { getChildrenOrFunction } from \"../utils/utilities\";\nimport { InteractionStatus } from \"@azure/msal-browser\";\n/**\n * Renders child components if user is unauthenticated\n * @param props\n */\nexport function UnauthenticatedTemplate({ username, homeAccountId, localAccountId, children, }) {\n    const context = useMsal();\n    const accountIdentifier = useMemo(() => {\n        return {\n            username,\n            homeAccountId,\n            localAccountId,\n        };\n    }, [username, homeAccountId, localAccountId]);\n    const isAuthenticated = useIsAuthenticated(accountIdentifier);\n    if (!isAuthenticated &&\n        context.inProgress !== InteractionStatus.Startup &&\n        context.inProgress !== InteractionStatus.HandleRedirect) {\n        return (React.createElement(React.Fragment, null, getChildrenOrFunction(children, context)));\n    }\n    return null;\n}\n//# sourceMappingURL=UnauthenticatedTemplate.js.map", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { useState, useEffect } from \"react\";\nimport { AccountEntity, } from \"@azure/msal-browser\";\nimport { useMsal } from \"./useMsal\";\nimport { getAccountByIdentifiers } from \"../utils/utilities\";\nfunction getAccount(instance, accountIdentifiers) {\n    if (!accountIdentifiers ||\n        (!accountIdentifiers.homeAccountId &&\n            !accountIdentifiers.localAccountId &&\n            !accountIdentifiers.username)) {\n        // If no account identifiers are provided, return active account\n        return instance.getActiveAccount();\n    }\n    return getAccountByIdentifiers(instance.getAllAccounts(), accountIdentifiers);\n}\n/**\n * Given 1 or more accountIdentifiers, returns the Account object if the user is signed-in\n * @param accountIdentifiers\n */\nexport function useAccount(accountIdentifiers) {\n    const { instance, inProgress, logger } = useMsal();\n    const [account, setAccount] = useState(() => getAccount(instance, accountIdentifiers));\n    useEffect(() => {\n        setAccount((currentAccount) => {\n            const nextAccount = getAccount(instance, accountIdentifiers);\n            if (!AccountEntity.accountInfoIsEqual(currentAccount, nextAccount, true)) {\n                logger.info(\"useAccount - Updating account\");\n                return nextAccount;\n            }\n            return currentAccount;\n        });\n    }, [inProgress, accountIdentifiers, instance, logger]);\n    return account;\n}\n//# sourceMappingURL=useAccount.js.map", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { AuthError } from \"@azure/msal-browser\";\nexport const ReactAuthErrorMessage = {\n    invalidInteractionType: {\n        code: \"invalid_interaction_type\",\n        desc: \"The provided interaction type is invalid.\",\n    },\n    unableToFallbackToInteraction: {\n        code: \"unable_to_fallback_to_interaction\",\n        desc: \"Interaction is required but another interaction is already in progress. Please try again when the current interaction is complete.\",\n    },\n};\nexport class ReactAuthError extends AuthError {\n    constructor(errorCode, errorMessage) {\n        super(errorCode, errorMessage);\n        Object.setPrototypeOf(this, ReactAuthError.prototype);\n        this.name = \"ReactAuthError\";\n    }\n    static createInvalidInteractionTypeError() {\n        return new ReactAuthError(ReactAuthErrorMessage.invalidInteractionType.code, ReactAuthErrorMessage.invalidInteractionType.desc);\n    }\n    static createUnableToFallbackToInteractionError() {\n        return new ReactAuthError(ReactAuthErrorMessage.unableToFallbackToInteraction.code, ReactAuthErrorMessage.unableToFallbackToInteraction.desc);\n    }\n}\n//# sourceMappingURL=ReactAuthError.js.map", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { useCallback, useEffect, useState, useRef } from \"react\";\nimport { InteractionType, EventType, InteractionStatus, InteractionRequiredAuthError, OIDC_DEFAULT_SCOPES, } from \"@azure/msal-browser\";\nimport { useIsAuthenticated } from \"./useIsAuthenticated\";\nimport { useMsal } from \"./useMsal\";\nimport { useAccount } from \"./useAccount\";\nimport { ReactAuthError } from \"../error/ReactAuthError\";\n/**\n * If a user is not currently signed in this hook invokes a login. Failed logins can be retried using the login callback returned.\n * If a user is currently signed in this hook attempts to acquire a token. Subsequent token requests can use the acquireToken callback returned.\n * Optionally provide a request object to be used in the login/acquireToken call.\n * Optionally provide a specific user that should be logged in.\n * @param interactionType\n * @param authenticationRequest\n * @param accountIdentifiers\n */\nexport function useMsalAuthentication(interactionType, authenticationRequest, accountIdentifiers) {\n    const { instance, inProgress, logger } = useMsal();\n    const isAuthenticated = useIsAuthenticated(accountIdentifiers);\n    const account = useAccount(accountIdentifiers);\n    const [[result, error], setResponse] = useState([null, null]);\n    // Used to prevent state updates after unmount\n    const mounted = useRef(true);\n    useEffect(() => {\n        return () => {\n            mounted.current = false;\n        };\n    }, []);\n    // Boolean used to check if interaction is in progress in acquireTokenSilent fallback. Use Ref instead of state to prevent acquireToken function from being regenerated on each change to interactionInProgress value\n    const interactionInProgress = useRef(inProgress !== InteractionStatus.None);\n    useEffect(() => {\n        interactionInProgress.current = inProgress !== InteractionStatus.None;\n    }, [inProgress]);\n    // Flag used to control when the hook calls login/acquireToken\n    const shouldAcquireToken = useRef(true);\n    useEffect(() => {\n        if (!!error) {\n            // Errors should be handled by consuming component\n            shouldAcquireToken.current = false;\n            return;\n        }\n        if (!!result) {\n            // Token has already been acquired, consuming component/application is responsible for renewing\n            shouldAcquireToken.current = false;\n            return;\n        }\n    }, [error, result]);\n    const login = useCallback(async (callbackInteractionType, callbackRequest) => {\n        const loginType = callbackInteractionType || interactionType;\n        const loginRequest = callbackRequest || authenticationRequest;\n        switch (loginType) {\n            case InteractionType.Popup:\n                logger.verbose(\"useMsalAuthentication - Calling loginPopup\");\n                return instance.loginPopup(loginRequest);\n            case InteractionType.Redirect:\n                // This promise is not expected to resolve due to full frame redirect\n                logger.verbose(\"useMsalAuthentication - Calling loginRedirect\");\n                return instance\n                    .loginRedirect(loginRequest)\n                    .then(null);\n            case InteractionType.Silent:\n                logger.verbose(\"useMsalAuthentication - Calling ssoSilent\");\n                return instance.ssoSilent(loginRequest);\n            default:\n                throw ReactAuthError.createInvalidInteractionTypeError();\n        }\n    }, [instance, interactionType, authenticationRequest, logger]);\n    const acquireToken = useCallback(async (callbackInteractionType, callbackRequest) => {\n        const fallbackInteractionType = callbackInteractionType || interactionType;\n        let tokenRequest;\n        if (callbackRequest) {\n            logger.trace(\"useMsalAuthentication - acquireToken - Using request provided in the callback\");\n            tokenRequest = {\n                ...callbackRequest,\n            };\n        }\n        else if (authenticationRequest) {\n            logger.trace(\"useMsalAuthentication - acquireToken - Using request provided in the hook\");\n            tokenRequest = {\n                ...authenticationRequest,\n                scopes: authenticationRequest.scopes || OIDC_DEFAULT_SCOPES,\n            };\n        }\n        else {\n            logger.trace(\"useMsalAuthentication - acquireToken - No request object provided, using default request.\");\n            tokenRequest = {\n                scopes: OIDC_DEFAULT_SCOPES,\n            };\n        }\n        if (!tokenRequest.account && account) {\n            logger.trace(\"useMsalAuthentication - acquireToken - Attaching account to request\");\n            tokenRequest.account = account;\n        }\n        const getToken = async () => {\n            logger.verbose(\"useMsalAuthentication - Calling acquireTokenSilent\");\n            return instance\n                .acquireTokenSilent(tokenRequest)\n                .catch(async (e) => {\n                if (e instanceof InteractionRequiredAuthError) {\n                    if (!interactionInProgress.current) {\n                        logger.error(\"useMsalAuthentication - Interaction required, falling back to interaction\");\n                        return login(fallbackInteractionType, tokenRequest);\n                    }\n                    else {\n                        logger.error(\"useMsalAuthentication - Interaction required but is already in progress. Please try again, if needed, after interaction completes.\");\n                        throw ReactAuthError.createUnableToFallbackToInteractionError();\n                    }\n                }\n                throw e;\n            });\n        };\n        return getToken()\n            .then((response) => {\n            if (mounted.current) {\n                setResponse([response, null]);\n            }\n            return response;\n        })\n            .catch((e) => {\n            if (mounted.current) {\n                setResponse([null, e]);\n            }\n            throw e;\n        });\n    }, [\n        instance,\n        interactionType,\n        authenticationRequest,\n        logger,\n        account,\n        login,\n    ]);\n    useEffect(() => {\n        const callbackId = instance.addEventCallback((message) => {\n            switch (message.eventType) {\n                case EventType.LOGIN_SUCCESS:\n                case EventType.SSO_SILENT_SUCCESS:\n                    if (message.payload) {\n                        setResponse([\n                            message.payload,\n                            null,\n                        ]);\n                    }\n                    break;\n                case EventType.LOGIN_FAILURE:\n                case EventType.SSO_SILENT_FAILURE:\n                    if (message.error) {\n                        setResponse([null, message.error]);\n                    }\n                    break;\n            }\n        });\n        logger.verbose(`useMsalAuthentication - Registered event callback with id: ${callbackId}`);\n        return () => {\n            if (callbackId) {\n                logger.verbose(`useMsalAuthentication - Removing event callback ${callbackId}`);\n                instance.removeEventCallback(callbackId);\n            }\n        };\n    }, [instance, logger]);\n    useEffect(() => {\n        if (shouldAcquireToken.current &&\n            inProgress === InteractionStatus.None) {\n            shouldAcquireToken.current = false;\n            if (!isAuthenticated) {\n                logger.info(\"useMsalAuthentication - No user is authenticated, attempting to login\");\n                login().catch(() => {\n                    // Errors are saved in state above\n                    return;\n                });\n            }\n            else if (account) {\n                logger.info(\"useMsalAuthentication - User is authenticated, attempting to acquire token\");\n                acquireToken().catch(() => {\n                    // Errors are saved in state above\n                    return;\n                });\n            }\n        }\n    }, [isAuthenticated, account, inProgress, login, acquireToken, logger]);\n    return {\n        login,\n        acquireToken,\n        result,\n        error,\n    };\n}\n//# sourceMappingURL=useMsalAuthentication.js.map", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport React, { useMemo } from \"react\";\nimport { getChildrenOrFunction } from \"../utils/utilities\";\nimport { useMsal } from \"../hooks/useMsal\";\nimport { useMsalAuthentication, } from \"../hooks/useMsalAuthentication\";\nimport { useIsAuthenticated } from \"../hooks/useIsAuthenticated\";\nimport { InteractionStatus, } from \"@azure/msal-browser\";\n/**\n * Attempts to authenticate user if not already authenticated, then renders child components\n * @param props\n */\nexport function MsalAuthenticationTemplate({ interactionType, username, homeAccountId, localAccountId, authenticationRequest, loadingComponent: LoadingComponent, errorComponent: ErrorComponent, children, }) {\n    const accountIdentifier = useMemo(() => {\n        return {\n            username,\n            homeAccountId,\n            localAccountId,\n        };\n    }, [username, homeAccountId, localAccountId]);\n    const context = useMsal();\n    const msalAuthResult = useMsalAuthentication(interactionType, authenticationRequest, accountIdentifier);\n    const isAuthenticated = useIsAuthenticated(accountIdentifier);\n    if (msalAuthResult.error && context.inProgress === InteractionStatus.None) {\n        if (!!ErrorComponent) {\n            return React.createElement(ErrorComponent, { ...msalAuthResult });\n        }\n        throw msalAuthResult.error;\n    }\n    if (isAuthenticated) {\n        return (React.createElement(React.Fragment, null, getChildrenOrFunction(children, msalAuthResult)));\n    }\n    if (!!LoadingComponent && context.inProgress !== InteractionStatus.None) {\n        return React.createElement(LoadingComponent, { ...context });\n    }\n    return null;\n}\n//# sourceMappingURL=MsalAuthenticationTemplate.js.map", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport React from \"react\";\nimport { useMsal } from \"../hooks/useMsal\";\n/**\n * Higher order component wraps provided component with msal by injecting msal context values into the component's props\n * @param Component\n */\nexport const withMsal = (Component) => {\n    const ComponentWithMsal = (props) => {\n        const msal = useMsal();\n        return React.createElement(Component, { ...props, msalContext: msal });\n    };\n    const componentName = Component.displayName || Component.name || \"Component\";\n    ComponentWithMsal.displayName = `withMsal(${componentName})`;\n    return ComponentWithMsal;\n};\n//# sourceMappingURL=withMsal.js.map"],
  "mappings": "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",
  "names": ["SKU", "React", "isAuthenticated", "React", "isAuthenticated", "React", "isAuthenticated", "isAuthenticated", "React", "React"]
}
